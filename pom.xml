<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.github.emabrey</groupId>
    <artifactId>basedir-plugin</artifactId>
    <version>0.1-SNAPSHOT</version>
    <packaging>maven-plugin</packaging>

    <name>Basedir Maven Plugin</name>
    <description>A Maven plugin to determine the basedir of the highest level project.</description>
    <url>http://emabrey.github.io/basedir-plugin/latest</url>

    <developers>
        <developer>
            <id>emabrey</id>
            <name>Emily Mabrey</name>
            <email>emabrey@users.noreply.github.com</email>
            <organizationUrl>https://github.com/emabrey</organizationUrl>
            <timezone>-5</timezone>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>MIT Expat License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <comments>Copyright 2015 Emily Mabrey</comments>
        </license>
    </licenses>

    <scm>
        <url>https://github.com/emabrey/basedir-plugin</url>
        <connection>scm:git:git://github.com/emabrey/basedir-plugin.git</connection>
        <developerConnection>scm:git:https://emabrey@github.com/emabrey/basedir-plugin.git</developerConnection>
    </scm>

    <distributionManagement>
        <site>
            <id>github</id>
            <name>gh-pages</name>
            <url>https://emabrey.github.io/basedir-plugin/</url>
        </site>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/emabrey/basedir-plugin/issues</url>
    </issueManagement>

    <ciManagement>
        <system>travis-ci</system>
        <url>https://travis-ci.org/emabrey/basedir-plugin</url>
    </ciManagement>

    <prerequisites>
        <maven>${project.maven.version}</maven>
    </prerequisites>

    <modules>
    </modules>

    <properties>
        <lineLength>120</lineLength>
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss.SSS, z</maven.build.timestamp.format>

        <project.maven.version>3.2.5</project.maven.version>
        <project.java.version>1.8</project.java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.reporting.stagingDirectory>${project.root.basedir}/target/gh-pages</project.reporting.stagingDirectory>

        <plugin.maven-javadoc.version>2.10.3</plugin.maven-javadoc.version>
        <plugin.jacoco-maven.version>0.7.5.201505241946</plugin.jacoco-maven.version>
        <plugin.maven-surefire.version>2.18.1</plugin.maven-surefire.version>
        <plugin.findbugs-maven.version>3.0.1</plugin.findbugs-maven.version>
        <plugin.maven-plugin.version>3.4</plugin.maven-plugin.version>

        <tool.proguard.version>5.2.1</tool.proguard.version>
        <tool.pegdown-doclet.version>1.1.1</tool.pegdown-doclet.version>
        <tool.pegdown-doclet.style>Googlecode</tool.pegdown-doclet.style>
        <tool.reflow-skin.version>1.1.1</tool.reflow-skin.version>

        <dependency.slf4j.version>1.7.12</dependency.slf4j.version>
    </properties>

    <build>

        <pluginManagement>
            <plugins>

                <!-- Explictly define plugin version without configuration -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>2.6.1</version>
                </plugin>

                <!-- Explictly define plugin version without configuration -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>

                <!-- Explictly define plugin version without configuration -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>

                <!-- Explictly define plugin version without configuration -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.7</version>
                </plugin>

                <!-- Explictly define plugin version without configuration -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                </plugin>

                <!-- Explictly define plugin version without configuration -->
                <plugin>
                    <groupId>org.eluder.coveralls</groupId>
                    <artifactId>coveralls-maven-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>

            <!-- Enforce minimum Java and Maven versions in a lifecycle
                 aware manner.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>default-lifecycle</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>clean-lifecycle</id>
                        <phase>pre-clean</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>site-lifecycle</id>
                        <phase>presite</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <rules>
                        <requireJavaVersion>
                            <version>[${project.java.version},)</version>
                        </requireJavaVersion>
                        <requireMavenVersion>
                            <version>[${project.maven.version},)</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
            </plugin>

            <!-- Determine the basedir of the top level POM. The POM
                 considered top level is a non-repository POM closest
                 to the root of the drive. This property is safe to
                 use in child modules even if they are being
                 executed standalone. This plugin should be replaced
                 by basedir-plugin ASAP.
            -->
            <plugin>
                <groupId>org.commonjava.maven.plugins</groupId>
                <artifactId>directory-maven-plugin</artifactId>
                <version>0.1</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <id>determine-absolute-basedir-main</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>pre-site</phase>
                        <id>determine-absolute-basedir-site</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <property>project.root.basedir</property>
                </configuration>
            </plugin>

            <!-- Generate a unique and time-based build identifier.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>1.3</version>
                <executions>
                    <execution>
                        <id>generate-build-id-main</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>create-timestamp</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>generate-build-id-site</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>create-timestamp</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <timestampFormat>${project.build.timestamp.format}</timestampFormat>
                    <timestampPropertyName>project.timestamp</timestampPropertyName>
                </configuration>
            </plugin>

            <!-- Automatically formats the Java source files of the main
                 and test directories using the configuration file supplied
                 within the resources directory of this project.
            -->
            <plugin>
                <groupId>net.revelc.code</groupId>
                <artifactId>formatter-maven-plugin</artifactId>
                <version>0.5.2</version>
                <executions>
                    <execution>
                        <id>process-all-sources-main</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>format</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <compilerCompliance>${project.java.version}</compilerCompliance>
                    <compilerSource>${project.java.version}</compilerSource>
                    <compilerTargetPlatform>${project.java.version}</compilerTargetPlatform>
                    <overrideConfigCompilerVersion>true</overrideConfigCompilerVersion>
                    <lineEnding>KEEP</lineEnding>
                    <configFile>src/main/formatter-maven-plugin/emabrey-codestyle.xml</configFile>
                </configuration>
            </plugin>

            <!-- Configures how the Findbugs static code analysis tool
                 should be run pre-compilation.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${plugin.findbugs-maven.version}</version>
                <executions>
                    <execution>
                        <id>max-effort-findbugs-source</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <effort>Max</effort>
                </configuration>
            </plugin>

            <!-- Allows specific language features from Java 8 to be
                 backported to target Java 7 at the bytecode level after
                 the Java 8 bytecode is generated via the compiler-plugin.
                 All classes after the execution of this plugin are Java 7
                 language feature compatible (but JDK code not present in
                 Java 7 is still unavailable).
            -->
            <plugin>
                <groupId>net.orfjackal.retrolambda</groupId>
                <artifactId>retrolambda-maven-plugin</artifactId>
                <version>2.0.5</version>
                <executions>
                    <execution>
                        <id>backport-main-classes</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>process-main</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>backport-test-classes</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>process-test</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <!-- Processes class bytecode to verify it is API compatible with
                 Java 7, eliminating the possibility of overlooking a
                 mistakenly used Java 8 only class (the type of problem
                 retrolambda does not address).
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>animal-sniffer-maven-plugin</artifactId>
                <version>1.14</version>
                <executions>
                    <execution>
                        <id>main-codebase-java17-verification</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <signature>
                                <groupId>org.codehaus.mojo.signature</groupId>
                                <artifactId>java17</artifactId>
                                <version>1.0</version>
                            </signature>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Configure code compilation -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <fork>true</fork>
                    <optimize>true</optimize>
                    <debug>false</debug>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <source>${project.java.version}</source>
                    <target>${project.java.version}</target>
                    <testSource>${maven.compiler.source}</testSource>
                    <testTarget>${maven.compiler.target}</testTarget>
                </configuration>
            </plugin>

            <!-- Generate plugin descriptor for all the plugin Mojo
                 found within the source tree of basedir-plugin.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-plugin-plugin</artifactId>
                <version>${plugin.maven-plugin.version}</version>
                <configuration>
                    <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>
                </configuration>
            </plugin>

            <!-- Configure JAR generation to include the index file
                 to speed up classloading.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <archive>
                        <index>true</index>
                    </archive>
                </configuration>
            </plugin>

            <!-- Configures Proguard obfuscation tool to generate an
                 obfuscated version of the JAR file that replaces the
                 default unobfuscated JAR.
            -->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.0.10</version>
                <executions>
                    <execution>
                        <id>obfuscation-packaging</id>
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                        <configuration>
                            <proguardVersion>${tool.proguard.version}</proguardVersion>
                            <obfuscate>true</obfuscate>
                            <attach>true</attach>
                            <appendClassifier>false</appendClassifier>
                            <addMavenDescriptor>false</addMavenDescriptor>
                            <injar>${project.build.finalName}.jar</injar>
                            <injarNotExistsSkip>true</injarNotExistsSkip>

                            <libs>
                                <lib>${java.home}/lib/rt.jar</lib>
                            </libs>

                            <options>
                                <option>-keepparameternames</option>
                                <option>-renamesourcefileattribute SourceFile</option>
                                <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
                                    SourceFile,LineNumberTable,*Annotation*,EnclosingMethod
                                </option>
                                <option>-target ${project.java.version}</option>
                                <option>-keep public class * {
                                    public protected *;
                                    }
                                </option>
                                <option>-keepclassmembernames class * {
                                    java.lang.Class class$(java.lang.String);
                                    java.lang.Class class$(java.lang.String, boolean);
                                    }
                                </option>
                                <option>-keepclasseswithmembernames,includedescriptorclasses class * {
                                    native <![CDATA[<methods>]]>;
                                    }
                                </option>
                                <option>-keepclassmembers,allowoptimization enum * {
                                    public static **[] values();
                                    public static ** valueOf(java.lang.String);
                                    }
                                </option>
                                <option>-keepclassmembers class * implements java.io.Serializable {
                                    static final long serialVersionUID;
                                    private static final java.io.ObjectStreamField[] serialPersistentFields;
                                    private void writeObject(java.io.ObjectOutputStream);
                                    private void readObject(java.io.ObjectInputStream);
                                    java.lang.Object writeReplace();
                                    java.lang.Object readResolve();
                                    }
                                </option>
                            </options>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>net.sf.proguard</groupId>
                        <artifactId>proguard-base</artifactId>
                        <version>${tool.proguard.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Configure unit tests to be parallel and multi-threaded
                 by default. The configured unit testing library is
                 TestNG.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${plugin.maven-surefire.version}</version>
                <executions>
                    <execution>
                        <id>multithreaded-unit-testing</id>
                        <phase>test</phase>
                        <configuration>
                            <forkedProcessTimeoutInSeconds>300</forkedProcessTimeoutInSeconds>
                            <runOrder>failedfirst</runOrder>
                            <forkCount>1C</forkCount>
                            <parallel>true</parallel>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Attach the JaCoCo Java agent to the JVM during the
                 initialize phase of the Maven execution.
            -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${plugin.jacoco-maven.version}</version>
                <executions>
                    <execution>
                        <id>prepare-coverage-data</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!-- Attach project code sources to the project as a
                 secondary artifact. This is required by the Sonatype
                 nexus requirements for OSSRH.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <id>attach-sources-jar-artifact</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Attach project main Javadoc to the project as a
                 secondary artifact. This is required by the Sonatype
                 nexus requirements for OSSRH.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${plugin.maven-javadoc.version}</version>
                <executions>
                    <execution>
                        <id>attach-javadocs-jar-artifact</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Configure site generation to use Reflow skin. Child
                 modules inherit the site.xml of this project.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.4</version>
                <executions>
                    <execution>
                        <id>stage-latest-site</id>
                        <phase>site</phase>
                        <goals>
                            <goal>stage</goal>
                        </goals>
                        <configuration>
                            <stagingDirectory>${project.reporting.stagingDirectory}/latest/</stagingDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stage-archive-site</id>
                        <phase>site-deploy</phase>
                        <goals>
                            <goal>stage</goal>
                        </goals>
                        <configuration>
                            <stagingDirectory>${project.reporting.stagingDirectory}/archive/${project.version}/${project.timestamp}/</stagingDirectory>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <relativizeDecorationLinks>false</relativizeDecorationLinks>
                    <skipDeploy>true</skipDeploy>
                    <attributes>
                        <exampleUsageDependencyVersion>${project.version}</exampleUsageDependencyVersion>
                    </attributes>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>lt.velykis.maven.skins</groupId>
                        <artifactId>reflow-velocity-tools</artifactId>
                        <version>${tool.reflow-skin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.velocity</groupId>
                        <artifactId>velocity</artifactId>
                        <version>1.7</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Attach armored GPG signatures to the project as a
                 secondary artifact. This is required by the Sonatype
                 nexus requirements for OSSRH. To successfully execute this
                 plugin you may need to specify the following profile within
                 your settings.xml file (replace the placeholder tokens with
                 the appropriate specifics for your GPG setup):

                <profile>
                    <id>gpg2-configuration</id>
                    <activation>
                            <activeByDefault>true</activeByDefault>
                    </activation>
                    <properties>
                            <gpg.executable>PATH_TO_GPG2_EXECUTABLE</gpg.executable>
                            <gpg.keyname>GPG_KEY_NAME</gpg.keyname>
                    </properties>
                </profile>
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <version>1.6</version>
                <executions>
                    <execution>
                        <id>sign-packaged-artifacts</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Generates a GitHub tagged release during a project deployment.
                 This release upload uses the configured authentication data
                 from within settings.xml for the github server id.
            -->
            <plugin>
                <groupId>de.jutzig</groupId>
                <artifactId>github-release-plugin</artifactId>
                <version>1.1.1</version>
                <executions>
                    <execution>
                        <id>create-github-release</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>release</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <releaseName>Basedir Maven Plugin - v.${project.version}</releaseName>
                    <tag>v.${project.version}</tag>
                    <artifact>${project.root.basedir}/target/${project.build.finalName}.jar</artifact>
                    <description>Basedir Maven Plugin project repository as of ${maven.build.timestamp}</description>
                </configuration>
            </plugin>

            <!-- Interface with the Sonatype nexus to deploy the Maven
                 artifacts of this project. This plugin automagically
                 replaces the default deploy plugin execution.
            -->
            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>nexus-staging-maven-plugin</artifactId>
                <version>1.6.5</version>
                <extensions>true</extensions>
                <configuration>
                    <serverId>ossrh</serverId>
                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                    <autoReleaseAfterClose>true</autoReleaseAfterClose>
                </configuration>
            </plugin>

            <!-- Configure error message generated during SCM dirty check.
                 The check must be manually triggered during a release by
                 calling scm:check-local-modification goal.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-scm-plugin</artifactId>
                <version>1.9.4</version>
                <configuration>
                    <timestampFormat>${timestamp.format.time}</timestampFormat>
                    <dateFormat>${timestamp.format.date}</dateFormat>
                    <userDateFormat>${timestamp.format.date}</userDateFormat>
                    <errorMessage>Cannot release while local repository has uncommitted changes.</errorMessage>
                    <pushChanges>false</pushChanges>
                </configuration>
            </plugin>

            <!-- Trigger the deployment of the project artifacts and site
                 documentation while automatically managing version modification
                 and project verification.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.2</version>
                <configuration>
                    <preparationGoals>clean verify scm:check-local-modification</preparationGoals>
                    <goals>deploy site-deploy</goals>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <useReleaseProfile>false</useReleaseProfile>
                    <releaseProfiles>release</releaseProfiles>
                    <branchName>release-@{project.version}</branchName>
                    <tagNameFormat>v.@{project.version}</tagNameFormat>
                </configuration>
            </plugin>

            <!-- Deploy the site documentation to the gh-pages branch of the
                 remote GitHub repository. This plugin uses the github server
                 authentication settings from settings.xml to upload the
                 documentation. This plugin must be executed manually using
            -->
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>0.12</version>
                <executions>
                    <execution>
                        <id>publish-site-to-github</id>
                        <phase>site-deploy</phase>
                        <goals>
                            <goal>site</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <project>
                        <groupId>com.github.emabrey</groupId>
                        <artifactId>basedir-plugin</artifactId>
                    </project>
                    <outputDirectory>${project.reporting.stagingDirectory}</outputDirectory>
                    <message>Deploy site documentation for the Basedir Maven Plugin</message>
                    <merge>true</merge>
                    <server>github</server>
                    <repositoryOwner>emabrey</repositoryOwner>
                    <repositoryName>basedir-plugin</repositoryName>
                    <branch>refs/heads/gh-pages</branch>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <reporting>
        <plugins>

            <!-- Configuration of the default report settings for
                the site generation.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <showAvatarImages>true</showAvatarImages>
                    <linkOnly>true</linkOnly>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>index</report>
                            <report>summary</report>
                            <report>license</report>
                            <report>project-team</report>
                            <report>scm</report>
                            <report>cim</report>
                            <report>issue-tracking</report>
                            <report>dependencies</report>
                            <report>dependency-convergence</report>
                            <report>plugins</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!-- Generate Mojo descriptor report on this Maven plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-plugin-plugin</artifactId>
                <version>${plugin.maven-plugin.version}</version>
            </plugin>

            <!-- Generate static code analysis report using Findbugs -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${plugin.findbugs-maven.version}</version>
            </plugin>

            <!-- Generate static code analysis report using PMD -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.5</version>
            </plugin>

            <!-- A site report containing cross-linkable source code
                 of both main and test Java code files.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.5</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>jxr</report>
                            <report>test-jxr</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!-- Configure a site report to generate Javadoc using a
                 custom doclet which provides Markdown, PlantUML, and
                 automatic highlighting. The Javadoc generated is
                 for the main and test codebases of each child POM in
                 addition to a main and test aggregate report for this
                 parent POM.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${plugin.maven-javadoc.version}</version>
                <reportSets>
                    <!-- Inherited per-child goals-->
                    <reportSet>
                        <id>document-subproject-classes</id>
                        <reports>
                            <report>javadoc</report>
                            <report>test-javadoc</report>
                        </reports>
                        <inherited>true</inherited>
                    </reportSet>
                    <!-- Uninherited parent-only goals-->
                    <reportSet>
                        <id>aggregate-parent-classes</id>
                        <reports>
                            <report>aggregate</report>
                            <report>test-aggregate</report>
                        </reports>
                        <inherited>false</inherited>
                        <configuration>
                            <overview>${project.root.basedir}/src/main/javadoc/overview.md</overview>
                        </configuration>
                    </reportSet>
                </reportSets>
                <configuration>
                    <show>public</show>
                    <doclet>ch.raffael.doclets.pegdown.PegdownDoclet</doclet>
                    <docletArtifact>
                        <groupId>ch.raffael.pegdown-doclet</groupId>
                        <artifactId>pegdown-doclet</artifactId>
                        <version>${tool.pegdown-doclet.version}</version>
                    </docletArtifact>
                    <docfilessubdirs>true</docfilessubdirs>
                    <useStandardDocletOptions>true</useStandardDocletOptions>
                    <additionalparam>-extensions autolinks,definitions,fenced-code-blocks,smartypants,tables</additionalparam>
                    <additionalparam>-enable-auto-highlight</additionalparam>
                    <additionalparam>-highlight-style ${tool.pegdown-doclet.style}</additionalparam>
                    <additionalparam>-parse-timeout 5</additionalparam>
                </configuration>
            </plugin>

            <!-- Generate report containing information on unit test
                 outcomes.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${plugin.maven-surefire.version}</version>
            </plugin>

            <!-- Generate unit test coverage report using pre-generated
                 test data.
            -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${plugin.jacoco-maven.version}</version>
                <reportSets>
                    <reportSet>
                        <id>generate-coverage-report</id>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

        </plugins>
    </reporting>

    <dependencies>

        <!-- Core Maven API -->
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-core</artifactId>
            <version>${project.maven.version}</version>
        </dependency>

        <!-- Maven Plugin API -->
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-plugin-api</artifactId>
            <version>${project.maven.version}</version>
        </dependency>

        <!-- Maven Project Model -->
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-model</artifactId>
            <version>${project.maven.version}</version>
        </dependency>

        <!-- maven-plugin-plugin annotations -->
        <dependency>
            <groupId>org.apache.maven.plugin-tools</groupId>
            <artifactId>maven-plugin-annotations</artifactId>
            <version>${plugin.maven-plugin.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Project Lombok Annotations -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.4</version>
            <scope>provided</scope>
        </dependency>

        <!-- Findbugs Warning Suppression Annotations -->
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <version>3.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Cosmopolitan i18n library -->
        <dependency>
            <groupId>c10n</groupId>
            <artifactId>c10n-core</artifactId>
            <version>1.1</version>
        </dependency>

        <!-- Google guava utility library -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
        </dependency>

        <!-- Functional programming -->
        <dependency>
            <groupId>org.functionaljava</groupId>
            <artifactId>functionaljava</artifactId>
            <version>4.4</version>
        </dependency>

        <!-- Javolution Real-time Utility Library -->
        <dependency>
            <groupId>org.javolution</groupId>
            <artifactId>javolution-core-java</artifactId>
            <version>6.0.0</version>
        </dependency>

        <!-- TestNG unit testing framework -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.9.6</version>
            <scope>test</scope>
        </dependency>

    </dependencies>
</project>